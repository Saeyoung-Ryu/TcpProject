@page "/Tool/Rank"

<h1>Rank</h1>
<PageTitle>Rank</PageTitle>
<Display Player="player" PlayerChanged="OnPlayerChanged"></Display>

@if (playerRank != null)
{
    <br>
    <button type="submit" class="btn btn-primary" @onclick="UpdatePlayerRankBtnAsync">Update</button>
    <table id="Border-Solid" class="table table-border table-hover w-auto">
        <thead>
        <tr class="table-primary">
            <th>Win Count</th>
            <th>Lose Count</th>
            <th>Point</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td><input type="text" @bind="playerRank.WinCount"></td>
            <td><input type="text" @bind="playerRank.LoseCount"></td>
            <td>@RankManager.CalculatePoint(playerRank.WinCount, playerRank.LoseCount)</td>
        </tr>
        </tbody>
    </table>
    
    <br><br>
    
    <h3>Player Ranking = @RankManager.GetMyRank(playerRank.Suid)</h3>
}
else
{
    <p>No Rank Data</p>
}

@code {
#pragma warning disable 1998
#pragma warning disable 0169
#pragma warning disable 0414

    protected Player player = null;

    private Common.Rank playerRank = null;
    private int playerRanking = 0;

    public async Task OnPlayerChanged(Player player)
    {
        this.player = player;

        if (player != null)
        {
            playerRank = await RankDB.GetRankAsync(player.Suid);

            if (playerRank != null)
                playerRanking = RankManager.GetMyRank(player.Suid);
        }
    }
}

@code
{
    public async Task UpdatePlayerRankBtnAsync()
    {
        playerRank.Point = RankManager.CalculatePoint(playerRank.WinCount, playerRank.LoseCount);

        await RankDB.SetRankAsync(playerRank);
        RankManager.UpdateRankList(playerRank);
    }
}
