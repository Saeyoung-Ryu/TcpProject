@page "/DBCompare/{ProjectName}"
@using HttpServer.Shared.Common
@using HttpServer.Shared.Enum
@using HttpServer.Shared.Manager
@using Microsoft.AspNetCore.Components

<PageTitle>@ProjectName</PageTitle>

<h1 style="font-size: 48px; font-weight: bold;">@ProjectName</h1>
<br>

<div style="display: flex;">
    <!-- Left Section -->
    <div style="flex: 1;">
        <!-- Content for the left section -->
    </div>
    
    <!-- Right Section -->
    <div style="position: relative;">
        <div style="position: absolute; top: 0; right: 100px;">
            <MatTabGroup @bind-ActiveIndex="@tabIndex" Style="width: 1200px">
                @foreach(var tableInfo in tableListForTabDelete.Where(e => e.IsDifferent))
                {
                    <MatTab Label="@tableInfo.TableName">
                        <LabelContent>
                            @tableInfo.TableName <MatIconButton Icon="@MatIconNames.Close" OnClick="@(_ => CloseTab(tableInfo))"></MatIconButton>
                        </LabelContent>
                        <ChildContent>
                            @if (tableInfo.DifferentType == DifferentType.TableNotExist)
                            {
                                <br><br>
                                <h5>Table Not Exist</h5>
                                <h5>@tableInfo.TableName</h5>
                            }
                            @if (tableInfo.DifferentType == DifferentType.ColumnDifferent)
                            {
                                <br><br>
                                <h5>Column is different</h5>
                                <h5>@tableInfo.TableName</h5>
                                <br><br>
                                @foreach (var column in tableInfo.Columns)
                                {
                                    @foreach(var columnInfo in column)
                                    {
                                        <h5>@columnInfo</h5>
                                    }
                                }
                            }
                            
                            @if (tableInfo.DifferentType == DifferentType.DataDifferentWithoutIndex || tableInfo.DifferentType == DifferentType.DataDifferentWithIndex)
                            {
                                <br><br>
                                <h5>Data is different</h5>
                                <h5>Table Name : @tableInfo.TableName</h5>
                                @if (tableInfo.PrimaryKeys.Count > 0)
                                {
                                    <h5>Primary Key : @string.Join(',', tableInfo.PrimaryKeys)</h5>
                                }
                                <br>
                                
                                <MatTabGroup @bind-ActiceIndex="@tabIndex1" Style="width: 1200px; color: #ffca2c">
                                    <MatTab Label="Table1">
                                        <br><br>
                                        <div id="container" class style="width: 1200px; height: 600px; overflow: auto; margin-top: 20px">
                                            <table class="table table-border table-hover w-auto">
                                                <thead>
                                                <tr class="table-primary">
                                                    @foreach (var column in tableInfo.Columns[0])
                                                    {
                                                        <th id="fixedHeader">@column</th>
                                                    }
                                                </tr>
                                                </thead>
                                                <tbody>
                                                
                                                @foreach (var key in tableInfo.Table1ValueDiffDictionary.Keys)
                                                {
                                                    <tr>
                                                        @for (int i = 0; i < tableInfo.Table1ValueDiffDictionary[key].Count; i++)
                                                        {
                                                            if (tableInfo.Table1ValueDiffDictionary[key][i].ToString() == tableInfo.Table2ValueDiffDictionary[key][i].ToString())
                                                            {
                                                                <td>@tableInfo.Table1ValueDiffDictionary[key][i].ToString()</td>
                                                            }
                                                            else
                                                            {
                                                                <td style="color: red; font-weight: bold;">@tableInfo.Table1ValueDiffDictionary[key][i].ToString()</td>
                                                            }
                                                        }
                                                    </tr>
                                                }
                                                
                                                @foreach (var key in tableInfo.Table1UniqueKeyDictionary.Keys)
                                                {
                                                    <tr style="background-color: mediumseagreen;">
                                                        @for (int i = 0; i < tableInfo.Table1UniqueKeyDictionary[key].Count; i++)
                                                        {
                                                            <td style="color: black; font-weight: bold;">@tableInfo.Table1UniqueKeyDictionary[key][i].ToString()</td>
                                                        }
                                                    </tr>
                                                }                                                

                                                @foreach (var row in tableInfo.Table1DifferentRows.ToList())
                                                {
                                                    <tr>
                                                        @foreach (var data in row)
                                                        {
                                                            @if (data == null)
                                                            {
                                                                <td>Null</td>
                                                            }
                                                            else
                                                            {
                                                                <td>@data.ToString()</td>
                                                            }
                                                        }
                                                    </tr>
                                                }
                                                </tbody>
                                            </table>
                                        </div>
                                    </MatTab>
        
                                    <MatTab Label="Table2">
                                        <br><br>
                                        <div id="container" class style="width: 1200px; height: 600px; overflow: auto; margin-top: 20px">
                                            <table class="table table-border table-hover w-auto">
                                                <thead>
                                                <tr class="table-primary">
                                                    @foreach (var column in tableInfo.Columns[0])
                                                    {
                                                        <th id="fixedHeader">@column</th>
                                                    }
                                                </tr>
                                                </thead>
                                                <tbody>
                                                
                                                @foreach (var key in tableInfo.Table2ValueDiffDictionary.Keys)
                                                {
                                                    <tr>
                                                        @for (int i = 0; i < tableInfo.Table2ValueDiffDictionary[key].Count; i++)
                                                        {
                                                            if (tableInfo.Table1ValueDiffDictionary[key][i].ToString() == tableInfo.Table2ValueDiffDictionary[key][i].ToString())
                                                            {
                                                                <td>@tableInfo.Table2ValueDiffDictionary[key][i].ToString()</td>
                                                            }
                                                            else
                                                            {
                                                                <td style="color: red; font-weight: bold;">@tableInfo.Table2ValueDiffDictionary[key][i].ToString()</td>
                                                            }
                                                        }
                                                    </tr>
                                                }
                                                
                                                @foreach (var key in tableInfo.Table2UniqueKeyDictionary.Keys)
                                                {
                                                    <tr style="background-color: mediumseagreen;">
                                                        @for (int i = 0; i < tableInfo.Table2UniqueKeyDictionary[key].Count; i++)
                                                        {
                                                            <td style="color: black; font-weight: bold;">@tableInfo.Table2UniqueKeyDictionary[key][i].ToString()</td>
                                                        }
                                                    </tr>
                                                }                                                

                                                @foreach (var row in tableInfo.Table2DifferentRows.ToList())
                                                {
                                                    <tr>
                                                        @foreach (var data in row)
                                                        {
                                                            @if (data == null)
                                                            {
                                                                <td>Null</td>
                                                            }
                                                            else
                                                            {
                                                                <td>@data.ToString()</td>
                                                            }
                                                        }
                                                    </tr>
                                                }
                                                </tbody>
                                            </table>
                                        </div>
                                    </MatTab>
                                </MatTabGroup>
                            }
                        </ChildContent>
                    </MatTab>
                }
            </MatTabGroup>
        </div>
        <!-- Content for the right section -->
    </div>
</div>

<div class="horizontal-container">
    <h3><span style="color: blue; font-weight: bold;">Step1)</span> 비교할 서버2개를 선택하세요.</h3>

</div>
<div>
    @foreach (var server in ServerInfo.Instance.ConnectionStrings[ProjectName].Keys)
    {
        var labelContent = $"{server}";
        <div style="margin-right: 20px;">
            <MatCheckbox @bind-Value="@serverCheckedDictionary[server]" Label="@labelContent"></MatCheckbox>
        </div>
    }

</div>

@if (CheckIfTwoIsSelected())
{
    <div>
        <button type="submit" class="btn btn-success" style="width: 80px" @onclick="SelectServerBtn" disabled="@showDatabaseSelect">선택</button>
    </div>
}

@if (showDatabaseSelect)
{
    <br><br>
    <div>
        <div class="horizontal-container">
            <h3><span style="color: blue; font-weight: bold;">Step2)</span> 비교할 데이터베이스를 선택하세요.</h3>
        </div>
    </div>
    <div>
        <select class="form-select" style="width: 300px" @onchange="(e) => OnSelectChange(e)" disabled="@showTableSelect">
            @foreach (var dbName in ServerInfo.Instance.FindDatabases(ProjectName))
            {
                <option value="@dbName" selected="@(dbName == compareDatabaseName)">@dbName</option>
            }
        </select>

        <button type="submit" class="btn btn-success" style="width: 80px" @onclick="SelectDatabaseBtn" disabled="@showTableSelect">선택</button>
    </div>
}

@if (showTableSelect)
{
    <br><br>
    <div>
        <div class="horizontal-container">
            <h3><span style="color: blue; font-weight: bold;">Step3)</span> 비교할 테이블을 입력하세요.</h3>
            <MatCheckbox @bind-Value="@compareRow" Label="Row 데이터 비교"></MatCheckbox>
            <MatCheckbox @bind-Value="@compareAllTables" Label="모든 테이블 비교"></MatCheckbox>
            <MatCheckbox @bind-Value="@compareAllSP" Label="모든 프로시져 비교"></MatCheckbox>
        </div>
    </div>
    <div>
        @if (!compareAllTables)
        {
            <input type="text" size="30" @bind="@tableToAdd">
            <button type="submit" class="btn btn-primary" style="width: 80px" @onclick="AddTableList">추가</button>
        }
        <button type="submit" class="btn btn-danger" style="width: 80px" @onclick="ResetTableListBtn">Reset</button>
    </div>
    
    @if (!isLoading)
    {
        @foreach (var tableToAdd in tableList)
        {
            <div style="display: flex;">
                @if (doCompare)
                {
                    if (tableToAdd.IsDifferent)
                    {
                        <h5 id="Text1Style">@tableToAdd.TableName </h5>
                        <MatIcon class="mat-icon-error">error</MatIcon>
                        if (tableToAdd.DifferentType == DifferentType.TableNotExist)
                        {
                            <h>Table not exist</h>
                        }
                        if (tableToAdd.DifferentType == DifferentType.ColumnDifferent)
                        {
                            <h>Column is different</h>
                        }
                        if (tableToAdd.DifferentType == DifferentType.DataDifferentWithIndex || tableToAdd.DifferentType == DifferentType.DataDifferentWithoutIndex)
                        {
                            <h>Data is different</h>
                        }
                    }
                    else
                    {
                        if (!compareAllTables)
                        {
                            <h5 id="Text1Style">@tableToAdd.TableName </h5>
                            <MatIcon class="mat-icon-confirm">check</MatIcon>
                        }
                    }
                }
                else
                {
                    <h5 id="Text1Style">@tableToAdd.TableName </h5>
                }
            </div>
        }
        
        @foreach (var procedureName in procedureDictionary.Keys)
        {
            <div style="display: flex;">
                @if (doCompare && compareAllSP)
                {
                    <h5 id="Text1Style">@procedureName </h5>
                    <MatIcon class="mat-icon-error">error</MatIcon>
                    @if (procedureDictionary[procedureName] == DifferentType.ProcedureNotExistTable2)
                    {
                        <h>Procedure Not Exist in @selectedServerNames[1]</h>
                    }
                    @if (procedureDictionary[procedureName] == DifferentType.ProcedureNotExistTable1)
                    {
                        <h>Procedure Not Exist in @selectedServerNames[0]</h>
                    }
                    @if (procedureDictionary[procedureName] == DifferentType.ProcedureDifferent)
                    {
                        <h>Procedure Different</h>
                    }
                }
            </div>
        }
    }
    else
    {
        <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Large" />
    }
    
    @if (tableList.Count > 0 || compareAllTables || compareAllSP)
    {
        <div>
            <button type="submit" class="btn btn-success" @onclick="@(e => StartCompareBtnAsync())">비교하기</button>
            @if (doCompare && NavigationManager.Uri.Contains("localhost"))
            {
                <button type="submit" class="btn btn-info" style="width: 80px" @onclick="DumpBtn" disabled="@doDump">덤프</button>
            }
        </div>
    }
    
    @if (doDump)
    {
        <br><br>
        <div class="horizontal-container">
            <h3><span style="color: blue; font-weight: bold;">Step4)</span> 덤프 대상 서버를 선택하세요.</h3>
        </div>
        <div>
            @foreach (var server in ServerInfo.Instance.ConnectionStrings[ProjectName].Keys)
            {
                var labelContent = $"{server}";
                <div style="margin-right: 20px;">
                    <MatCheckbox @bind-Value="@dumpCheckedDictionary[server]" Label="@labelContent"></MatCheckbox>
                </div>
            }
        </div>
        
        @if (CheckIfOneIsSelected())
        {
            if(isDumpLoading)
            {
                <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Large" />
            }
            else
            {
                if (!finishedDump)
                {
                    <div>
                        <button type="submit" class="btn btn-success" @onclick="DumpAsyncBtn">덤프 시작</button>
                    </div>
                }
                else
                {
                    <div>
                        <button type="submit" class="btn btn-warning" @onclick="DumpAsyncBtn">다시 덤프</button>
                    </div>
                }
            }
        }
    }
}


@inject NavigationManager NavigationManager
@code
{
#pragma warning disable CS8600    
#pragma warning disable CS8601
#pragma warning disable CS8604    
#pragma warning disable CS8618
#pragma warning disable CS8620    
    
    int tabIndex = 0;
    int tabIndex1 = 0;

    Dictionary<string, bool> serverCheckedDictionary = new Dictionary<string, bool>();
    Dictionary<string, bool> dumpCheckedDictionary = new Dictionary<string, bool>();
    List<string> selectedServerNames = new List<string>();

    bool compareRow = true;
    bool compareAllTables = false;
    bool compareAllSP = false;
    bool showDatabaseSelect = false;
    bool showTableSelect = false;
    bool doCompare = false;
    bool doDump = false;
    bool isLoading = false;
    bool isDumpLoading = false;
    bool finishedDump = false;
    string compareDatabaseName = "";
    string tableToAdd = "";
    
    List<TableInfo> tableList = new List<TableInfo>();
    List<TableInfo> tableListForTabDelete = new List<TableInfo>();
    Dictionary<string, DifferentType> procedureDictionary = new Dictionary<string, DifferentType>();
    
    [Parameter]
    public string ProjectName { get; set; }
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ResetObjects();
    }
    
    protected override Task OnInitializedAsync()
    {
        foreach (var projectName in ServerInfo.Instance.ConnectionStrings[ProjectName].Keys)
        {
            serverCheckedDictionary.Add(projectName, false);
            dumpCheckedDictionary.Add(projectName, false);
        }
        
        return base.OnInitializedAsync();
    }

    private void ResetObjects()
    {
        ResetTableList();
    }
    
    private void OnSelectChange(ChangeEventArgs e)
    {
        compareDatabaseName = e?.Value?.ToString() ?? ""; // Null-conditional operator and null-coalescing operator used here
    }
    
    private bool CheckIfTwoIsSelected()
    {
        int count = 0;
        
        foreach (var value in serverCheckedDictionary.Values)
        {
            if (value == true)
                count++;
        }

        return count == 2;
    }

    private bool CheckIfOneIsSelected()
    {
        int count = 0;
        
        foreach (var value in dumpCheckedDictionary.Values)
        {
            if (value == true)
                count++;
        }

        return count == 1;
    }
    
    private void SelectServerBtn()
    {
        showDatabaseSelect = true;
    }

    private void SelectDatabaseBtn()
    {
        showTableSelect = true;
    }

    private void ResetTableListBtn()
    {
        ResetTableList();
    }

    private void AddTableList()
    {
        if (tableToAdd != String.Empty)
        {
            TableInfo tableInfo = new TableInfo();

            if (!tableToAdd.StartsWith("tbl"))
                tableToAdd = "tbl" + tableToAdd;

            if(tableList.Select(e => e.TableName).ToList().Contains(tableToAdd))
                return;
            
            tableInfo.TableName = tableToAdd;

            tableList.Add(tableInfo);
        }
        tableToAdd = String.Empty;
    }

    private void ResetTableInfo()
    {
        foreach (var tableInfo in tableList)
        {
            tableInfo.IsDifferent = false;
            tableInfo.DifferentType = DifferentType.None;
            tableInfo.PrimaryKeys = new List<string>();
            tableInfo.Columns = new List<string>[2];
            tableInfo.Table1UniqueKeyDictionary = new Dictionary<string, List<object>>();
            tableInfo.Table2UniqueKeyDictionary = new Dictionary<string, List<object>>();
            tableInfo.Table1ValueDiffDictionary = new Dictionary<string, List<object>>();
            tableInfo.Table2ValueDiffDictionary = new Dictionary<string, List<object>>();
            tableInfo.Table1DifferentRows = new List<List<object>>();
            tableInfo.Table2DifferentRows = new List<List<object>>();
        }
    }

    private void ResetTableList()
    {
        tabIndex = 0;
        tabIndex1 = 0;

        serverCheckedDictionary = new Dictionary<string, bool>();
        dumpCheckedDictionary = new Dictionary<string, bool>();
        
        foreach (var projectName in ServerInfo.Instance.ConnectionStrings[ProjectName].Keys)
        {
            serverCheckedDictionary.Add(projectName, false);
            dumpCheckedDictionary.Add(projectName, false);
        }

        showDatabaseSelect = false;
        showTableSelect = false;
        doCompare = false;
        compareRow = true;
        compareAllTables = false;
        compareAllSP = false;
        doDump = false;
        isLoading = false;
        isDumpLoading = false;
        finishedDump = false;

        compareDatabaseName = "";
        tableToAdd = "";
        tableList = new List<TableInfo>();
        tableListForTabDelete = new List<TableInfo>();
        selectedServerNames = new List<string>();
    }

    private async Task StartCompareBtnAsync()
    {
        try
        {
            ResetTableInfo();
        
            List<string> servers = new List<string>();
            string database = compareDatabaseName;

            foreach (var key in serverCheckedDictionary.Keys)
            {
                if (serverCheckedDictionary[key])
                {
                    servers.Add(ServerInfo.Instance.ConnectionStrings[ProjectName][key]);
                    selectedServerNames.Add(key);
                }
            }

            isLoading = true;
        
            if (database == string.Empty)
                database = ServerInfo.Instance.Databases[ProjectName][0];
        
            var compareResult = await CompareManager.CompareAsync(servers, database, tableList, compareRow, compareAllTables, compareAllSP);
            tableList = compareResult.TableInfo;
            procedureDictionary = compareResult.ProcedureInfo;
            
            tableListForTabDelete = tableList.Select(e => e).ToList();
        
            doCompare = true;
            isLoading = false;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void DumpBtn()
    {
        doDump = true;
    }

    private async Task DumpAsyncBtn()
    {
        try
        {
            isDumpLoading = true;
        
            string server = String.Empty;
            string database = compareDatabaseName;
            List<string> tables = new List<string>();
        
            foreach (var key in dumpCheckedDictionary.Keys)
            {
                if (dumpCheckedDictionary[key])
                    server = ServerInfo.Instance.ConnectionStrings[ProjectName][key];
            }
        
            if (database == string.Empty)
                database = ServerInfo.Instance.Databases[ProjectName][0];
        
            await DumpManager.DumpAsync(database, server, tableList.Where(e => e.IsDifferent).Select(e => e.TableName).ToList(), compareRow, compareAllSP);
        
            isDumpLoading = false;
            finishedDump = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    
    void CloseTab(TableInfo tableInfo)
    {
        tableListForTabDelete = tableListForTabDelete.Where(e => e.TableName != tableInfo.TableName).ToList();
    }
}
