@using HttpServer.Data
@using System.Text
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage storage

<br>
<br>
<div>
    <table id="Border-Solid" class="table table-border table-hover w-auto">
        <tbody>
        <tr>
            <td>Nickname</td>
            <td><input type="text" size="20" @bind="@Nickname"></td>
            <td><button type="submit" class="btn btn-outline-secondary" @onclick="SearchWithNickNameBtnAsync">Search</button></td>
        </tr>
        <tr>
            <td>Seq</td>
            <td><input type="text" size="20" @bind="@Seq"></td>
            <td><button type="submit" class="btn btn-outline-secondary" @onclick="SearchWithSeqBtnAsync">Search</button></td>
        </tr>
        </tbody>
    </table>
</div>
<hr>
<br>

@code {
    public string Nickname { get; set; }
    public string Seq { get; set; }
    SearchInfo searchInfo = new SearchInfo();

    [Parameter]
    public Player Player { get; set; }
    
    [Parameter]
    public EventCallback<Player> PlayerChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                ProtectedBrowserStorageResult<string> storageSeq = await storage.GetAsync<string>("seq");
                if (storageSeq.Success)
                {
                    Seq = storageSeq.Value;
                    if (Int64.TryParse(Seq, out var seq))
                    {
                        var player = await AccountDB.GetPlayerWithSeqAsync(seq);
                        if (player != null)
                        {
                            Nickname = player.Nickname;
                        
                            await RefreshAsync(player);
                        }
                        else
                        {
                            await storage.DeleteAsync("seq");
                        }
                    }
                }
                else
                {
                    await storage.DeleteAsync("seq");
                }
            }
            catch
            {
                await storage.DeleteAsync("seq");
            }
        }
    }
    
    private async Task RefreshAsync(Player player)
    {
        if (player != null)
        {
            Nickname = player.Nickname;
            Seq = player.Seq.ToString();
            
            searchInfo.Nickname = Nickname;
            searchInfo.Seq = Seq;
        
            await storage.SetAsync("seq", Seq);
        }
        else
        {
            Reset();
        }
        
        await PlayerChanged.InvokeAsync(player);
    }
    
    private void Reset()
    {
        Nickname = "";
        Seq = "";
        searchInfo = new();
    }

    private async Task SearchWithNickNameBtnAsync()
    {
        Console.WriteLine(Nickname);
        var player = await AccountDB.GetPlayerWithNicknameAsync(Nickname);

        if (player != null)
        {
            Seq = player.Seq.ToString();
            Nickname = player.Nickname;

            await RefreshAsync(player);
        }
    }

    private async Task SearchWithSeqBtnAsync()
    {
        Console.WriteLine(searchInfo.Seq);
        var player = await AccountDB.GetPlayerWithSeqAsync(long.Parse(searchInfo.Seq));

        if (player != null)
        {
            Seq = player.Seq.ToString();
            Nickname = player.Nickname;

            await RefreshAsync(player);
        }
    }
}

@code
{
    public class SearchInfo
    {
        public string Nickname { get; set; }
        public string Seq { get; set; }    
    }
}
